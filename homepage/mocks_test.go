// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package homepage

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/image"
	"github.com/ONSdigital/dp-api-clients-go/zebedee"
	"github.com/ONSdigital/dp-frontend-homepage-controller/clients/release_calendar"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of ZebedeeClient.
//
// 	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
// 		// make and configure a mocked ZebedeeClient
// 		mockedZebedeeClient := &ZebedeeClientMock{
// 			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetHomepageContentFunc: func(ctx context.Context, userAccessToken string, collectionID string, lang string, path string) (zebedee.HomepageContent, error) {
// 				panic("mock out the GetHomepageContent method")
// 			},
// 			GetTimeseriesMainFigureFunc: func(ctx context.Context, userAuthToken string, collectionID string, lang string, uri string) (zebedee.TimeseriesMainFigure, error) {
// 				panic("mock out the GetTimeseriesMainFigure method")
// 			},
// 		}
//
// 		// use mockedZebedeeClient in code that requires ZebedeeClient
// 		// and then make assertions.
//
// 	}
type ZebedeeClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// GetHomepageContentFunc mocks the GetHomepageContent method.
	GetHomepageContentFunc func(ctx context.Context, userAccessToken string, collectionID string, lang string, path string) (zebedee.HomepageContent, error)

	// GetTimeseriesMainFigureFunc mocks the GetTimeseriesMainFigure method.
	GetTimeseriesMainFigureFunc func(ctx context.Context, userAuthToken string, collectionID string, lang string, uri string) (zebedee.TimeseriesMainFigure, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// GetHomepageContent holds details about calls to the GetHomepageContent method.
		GetHomepageContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAccessToken is the userAccessToken argument value.
			UserAccessToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// Path is the path argument value.
			Path string
		}
		// GetTimeseriesMainFigure holds details about calls to the GetTimeseriesMainFigure method.
		GetTimeseriesMainFigure []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// URI is the uri argument value.
			URI string
		}
	}
	lockChecker                 sync.RWMutex
	lockGetHomepageContent      sync.RWMutex
	lockGetTimeseriesMainFigure sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ZebedeeClientMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ZebedeeClientMock.CheckerFunc: method is nil but ZebedeeClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedZebedeeClient.CheckerCalls())
func (mock *ZebedeeClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetHomepageContent calls GetHomepageContentFunc.
func (mock *ZebedeeClientMock) GetHomepageContent(ctx context.Context, userAccessToken string, collectionID string, lang string, path string) (zebedee.HomepageContent, error) {
	if mock.GetHomepageContentFunc == nil {
		panic("ZebedeeClientMock.GetHomepageContentFunc: method is nil but ZebedeeClient.GetHomepageContent was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
		Path            string
	}{
		Ctx:             ctx,
		UserAccessToken: userAccessToken,
		CollectionID:    collectionID,
		Lang:            lang,
		Path:            path,
	}
	mock.lockGetHomepageContent.Lock()
	mock.calls.GetHomepageContent = append(mock.calls.GetHomepageContent, callInfo)
	mock.lockGetHomepageContent.Unlock()
	return mock.GetHomepageContentFunc(ctx, userAccessToken, collectionID, lang, path)
}

// GetHomepageContentCalls gets all the calls that were made to GetHomepageContent.
// Check the length with:
//     len(mockedZebedeeClient.GetHomepageContentCalls())
func (mock *ZebedeeClientMock) GetHomepageContentCalls() []struct {
	Ctx             context.Context
	UserAccessToken string
	CollectionID    string
	Lang            string
	Path            string
} {
	var calls []struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
		Path            string
	}
	mock.lockGetHomepageContent.RLock()
	calls = mock.calls.GetHomepageContent
	mock.lockGetHomepageContent.RUnlock()
	return calls
}

// GetTimeseriesMainFigure calls GetTimeseriesMainFigureFunc.
func (mock *ZebedeeClientMock) GetTimeseriesMainFigure(ctx context.Context, userAuthToken string, collectionID string, lang string, uri string) (zebedee.TimeseriesMainFigure, error) {
	if mock.GetTimeseriesMainFigureFunc == nil {
		panic("ZebedeeClientMock.GetTimeseriesMainFigureFunc: method is nil but ZebedeeClient.GetTimeseriesMainFigure was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		URI           string
	}{
		Ctx:           ctx,
		UserAuthToken: userAuthToken,
		CollectionID:  collectionID,
		Lang:          lang,
		URI:           uri,
	}
	mock.lockGetTimeseriesMainFigure.Lock()
	mock.calls.GetTimeseriesMainFigure = append(mock.calls.GetTimeseriesMainFigure, callInfo)
	mock.lockGetTimeseriesMainFigure.Unlock()
	return mock.GetTimeseriesMainFigureFunc(ctx, userAuthToken, collectionID, lang, uri)
}

// GetTimeseriesMainFigureCalls gets all the calls that were made to GetTimeseriesMainFigure.
// Check the length with:
//     len(mockedZebedeeClient.GetTimeseriesMainFigureCalls())
func (mock *ZebedeeClientMock) GetTimeseriesMainFigureCalls() []struct {
	Ctx           context.Context
	UserAuthToken string
	CollectionID  string
	Lang          string
	URI           string
} {
	var calls []struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		URI           string
	}
	mock.lockGetTimeseriesMainFigure.RLock()
	calls = mock.calls.GetTimeseriesMainFigure
	mock.lockGetTimeseriesMainFigure.RUnlock()
	return calls
}

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
// 	func TestSomethingThatUsesRenderClient(t *testing.T) {
//
// 		// make and configure a mocked RenderClient
// 		mockedRenderClient := &RenderClientMock{
// 			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			DoFunc: func(s string, bytes []byte) ([]byte, error) {
// 				panic("mock out the Do method")
// 			},
// 		}
//
// 		// use mockedRenderClient in code that requires RenderClient
// 		// and then make assertions.
//
// 	}
type RenderClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// DoFunc mocks the Do method.
	DoFunc func(s string, bytes []byte) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// Do holds details about calls to the Do method.
		Do []struct {
			// S is the s argument value.
			S string
			// Bytes is the bytes argument value.
			Bytes []byte
		}
	}
	lockChecker sync.RWMutex
	lockDo      sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *RenderClientMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("RenderClientMock.CheckerFunc: method is nil but RenderClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedRenderClient.CheckerCalls())
func (mock *RenderClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Do calls DoFunc.
func (mock *RenderClientMock) Do(s string, bytes []byte) ([]byte, error) {
	if mock.DoFunc == nil {
		panic("RenderClientMock.DoFunc: method is nil but RenderClient.Do was just called")
	}
	callInfo := struct {
		S     string
		Bytes []byte
	}{
		S:     s,
		Bytes: bytes,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(s, bytes)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRenderClient.DoCalls())
func (mock *RenderClientMock) DoCalls() []struct {
	S     string
	Bytes []byte
} {
	var calls []struct {
		S     string
		Bytes []byte
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}


// Ensure, that BabbageClientMock does implement BabbageClient.
// If this is not the case, regenerate this file with moq.
var _ BabbageClient = &BabbageClientMock{}

// BabbageClientMock is a mock implementation of BabbageClient.
//
// 	func TestSomethingThatUsesBabbageClient(t *testing.T) {
//
// 		// make and configure a mocked BabbageClient
// 		mockedBabbageClient := &BabbageClientMock{
// 			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetReleaseCalendarFunc: func(ctx context.Context, userAccessToken string, fromDay string, fromMonth string, fromYear string) (release_calendar.ReleaseCalendar, error) {
// 				panic("mock out the GetReleaseCalendar method")
// 			},
// 		}
//
// 		// use mockedBabbageClient in code that requires BabbageClient
// 		// and then make assertions.
//
// 	}
type BabbageClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// GetReleaseCalendarFunc mocks the GetReleaseCalendar method.
	GetReleaseCalendarFunc func(ctx context.Context, userAccessToken string, fromDay string, fromMonth string, fromYear string) (release_calendar.ReleaseCalendar, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// GetReleaseCalendar holds details about calls to the GetReleaseCalendar method.
		GetReleaseCalendar []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAccessToken is the userAccessToken argument value.
			UserAccessToken string
			// FromDay is the fromDay argument value.
			FromDay string
			// FromMonth is the fromMonth argument value.
			FromMonth string
			// FromYear is the fromYear argument value.
			FromYear string
		}
	}
	lockChecker            sync.RWMutex
	lockGetReleaseCalendar sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *BabbageClientMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("BabbageClientMock.CheckerFunc: method is nil but BabbageClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedBabbageClient.CheckerCalls())
func (mock *BabbageClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetReleaseCalendar calls GetReleaseCalendarFunc.
func (mock *BabbageClientMock) GetReleaseCalendar(ctx context.Context, userAccessToken string, fromDay string, fromMonth string, fromYear string) (release_calendar.ReleaseCalendar, error) {
	if mock.GetReleaseCalendarFunc == nil {
		panic("BabbageClientMock.GetReleaseCalendarFunc: method is nil but BabbageClient.GetReleaseCalendar was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		UserAccessToken string
		FromDay         string
		FromMonth       string
		FromYear        string
	}{
		Ctx:             ctx,
		UserAccessToken: userAccessToken,
		FromDay:         fromDay,
		FromMonth:       fromMonth,
		FromYear:        fromYear,
	}
	mock.lockGetReleaseCalendar.Lock()
	mock.calls.GetReleaseCalendar = append(mock.calls.GetReleaseCalendar, callInfo)
	mock.lockGetReleaseCalendar.Unlock()
	return mock.GetReleaseCalendarFunc(ctx, userAccessToken, fromDay, fromMonth, fromYear)
}

// GetReleaseCalendarCalls gets all the calls that were made to GetReleaseCalendar.
// Check the length with:
//     len(mockedBabbageClient.GetReleaseCalendarCalls())
func (mock *BabbageClientMock) GetReleaseCalendarCalls() []struct {
	Ctx             context.Context
	UserAccessToken string
	FromDay         string
	FromMonth       string
	FromYear        string
} {
	var calls []struct {
		Ctx             context.Context
		UserAccessToken string
		FromDay         string
		FromMonth       string
		FromYear        string
	}
	mock.lockGetReleaseCalendar.RLock()
	calls = mock.calls.GetReleaseCalendar
	mock.lockGetReleaseCalendar.RUnlock()
	return calls
}

// Ensure, that ImageClientMock does implement ImageClient.
// If this is not the case, regenerate this file with moq.
var _ ImageClient = &ImageClientMock{}

// ImageClientMock is a mock implementation of ImageClient.
//
// 	func TestSomethingThatUsesImageClient(t *testing.T) {
//
// 		// make and configure a mocked ImageClient
// 		mockedImageClient := &ImageClientMock{
// 			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetDownloadVariantFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, imageID string, variant string) (image.ImageDownload, error) {
// 				panic("mock out the GetDownloadVariant method")
// 			},
// 		}
//
// 		// use mockedImageClient in code that requires ImageClient
// 		// and then make assertions.
//
// 	}
type ImageClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// GetDownloadVariantFunc mocks the GetDownloadVariant method.
	GetDownloadVariantFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, imageID string, variant string) (image.ImageDownload, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// GetDownloadVariant holds details about calls to the GetDownloadVariant method.
		GetDownloadVariant []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// ImageID is the imageID argument value.
			ImageID string
			// Variant is the variant argument value.
			Variant string
		}
	}
	lockChecker            sync.RWMutex
	lockGetDownloadVariant sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ImageClientMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ImageClientMock.CheckerFunc: method is nil but ImageClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedImageClient.CheckerCalls())
func (mock *ImageClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetDownloadVariant calls GetDownloadVariantFunc.
func (mock *ImageClientMock) GetDownloadVariant(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, imageID string, variant string) (image.ImageDownload, error) {
	if mock.GetDownloadVariantFunc == nil {
		panic("ImageClientMock.GetDownloadVariantFunc: method is nil but ImageClient.GetDownloadVariant was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		ImageID          string
		Variant          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		ImageID:          imageID,
		Variant:          variant,
	}
	mock.lockGetDownloadVariant.Lock()
	mock.calls.GetDownloadVariant = append(mock.calls.GetDownloadVariant, callInfo)
	mock.lockGetDownloadVariant.Unlock()
	return mock.GetDownloadVariantFunc(ctx, userAuthToken, serviceAuthToken, collectionID, imageID, variant)
}

// GetDownloadVariantCalls gets all the calls that were made to GetDownloadVariant.
// Check the length with:
//     len(mockedImageClient.GetDownloadVariantCalls())
func (mock *ImageClientMock) GetDownloadVariantCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	ImageID          string
	Variant          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		ImageID          string
		Variant          string
	}
	mock.lockGetDownloadVariant.RLock()
	calls = mock.calls.GetDownloadVariant
	mock.lockGetDownloadVariant.RUnlock()
	return calls
}