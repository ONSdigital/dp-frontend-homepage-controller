// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package homepage

import (
	"context"
	model "github.com/ONSdigital/dp-frontend-homepage-controller/model"
	"sync"
)

// Ensure, that HomepageClienterMock does implement HomepageClienter.
// If this is not the case, regenerate this file with moq.
var _ HomepageClienter = &HomepageClienterMock{}

// HomepageClienterMock is a mock implementation of HomepageClienter.
//
// 	func TestSomethingThatUsesHomepageClienter(t *testing.T) {
//
// 		// make and configure a mocked HomepageClienter
// 		mockedHomepageClienter := &HomepageClienterMock{
// 			CloseFunc: func()  {
// 				panic("mock out the Close method")
// 			},
// 			GetHomePageFunc: func(ctx context.Context, userAccessToken string, collectionID string, lang string) (*model.HomepageData, error) {
// 				panic("mock out the GetHomePage method")
// 			},
// 			StartBackgroundUpdateFunc: func(ctx context.Context, errorChannel chan error)  {
// 				panic("mock out the StartBackgroundUpdate method")
// 			},
// 		}
//
// 		// use mockedHomepageClienter in code that requires HomepageClienter
// 		// and then make assertions.
//
// 	}
type HomepageClienterMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// GetHomePageFunc mocks the GetHomePage method.
	GetHomePageFunc func(ctx context.Context, userAccessToken string, collectionID string, lang string) (*model.HomepageData, error)

	// StartBackgroundUpdateFunc mocks the StartBackgroundUpdate method.
	StartBackgroundUpdateFunc func(ctx context.Context, errorChannel chan error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetHomePage holds details about calls to the GetHomePage method.
		GetHomePage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAccessToken is the userAccessToken argument value.
			UserAccessToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
		}
		// StartBackgroundUpdate holds details about calls to the StartBackgroundUpdate method.
		StartBackgroundUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ErrorChannel is the errorChannel argument value.
			ErrorChannel chan error
		}
	}
	lockClose                 sync.RWMutex
	lockGetHomePage           sync.RWMutex
	lockStartBackgroundUpdate sync.RWMutex
}

// Close calls CloseFunc.
func (mock *HomepageClienterMock) Close() {
	if mock.CloseFunc == nil {
		panic("HomepageClienterMock.CloseFunc: method is nil but HomepageClienter.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedHomepageClienter.CloseCalls())
func (mock *HomepageClienterMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetHomePage calls GetHomePageFunc.
func (mock *HomepageClienterMock) GetHomePage(ctx context.Context, userAccessToken string, collectionID string, lang string) (*model.HomepageData, error) {
	if mock.GetHomePageFunc == nil {
		panic("HomepageClienterMock.GetHomePageFunc: method is nil but HomepageClienter.GetHomePage was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
	}{
		Ctx:             ctx,
		UserAccessToken: userAccessToken,
		CollectionID:    collectionID,
		Lang:            lang,
	}
	mock.lockGetHomePage.Lock()
	mock.calls.GetHomePage = append(mock.calls.GetHomePage, callInfo)
	mock.lockGetHomePage.Unlock()
	return mock.GetHomePageFunc(ctx, userAccessToken, collectionID, lang)
}

// GetHomePageCalls gets all the calls that were made to GetHomePage.
// Check the length with:
//     len(mockedHomepageClienter.GetHomePageCalls())
func (mock *HomepageClienterMock) GetHomePageCalls() []struct {
	Ctx             context.Context
	UserAccessToken string
	CollectionID    string
	Lang            string
} {
	var calls []struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
	}
	mock.lockGetHomePage.RLock()
	calls = mock.calls.GetHomePage
	mock.lockGetHomePage.RUnlock()
	return calls
}

// StartBackgroundUpdate calls StartBackgroundUpdateFunc.
func (mock *HomepageClienterMock) StartBackgroundUpdate(ctx context.Context, errorChannel chan error) {
	if mock.StartBackgroundUpdateFunc == nil {
		panic("HomepageClienterMock.StartBackgroundUpdateFunc: method is nil but HomepageClienter.StartBackgroundUpdate was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ErrorChannel chan error
	}{
		Ctx:          ctx,
		ErrorChannel: errorChannel,
	}
	mock.lockStartBackgroundUpdate.Lock()
	mock.calls.StartBackgroundUpdate = append(mock.calls.StartBackgroundUpdate, callInfo)
	mock.lockStartBackgroundUpdate.Unlock()
	mock.StartBackgroundUpdateFunc(ctx, errorChannel)
}

// StartBackgroundUpdateCalls gets all the calls that were made to StartBackgroundUpdate.
// Check the length with:
//     len(mockedHomepageClienter.StartBackgroundUpdateCalls())
func (mock *HomepageClienterMock) StartBackgroundUpdateCalls() []struct {
	Ctx          context.Context
	ErrorChannel chan error
} {
	var calls []struct {
		Ctx          context.Context
		ErrorChannel chan error
	}
	mock.lockStartBackgroundUpdate.RLock()
	calls = mock.calls.StartBackgroundUpdate
	mock.lockStartBackgroundUpdate.RUnlock()
	return calls
}
